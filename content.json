{"meta":{"title":"萱仔的学习小屋","subtitle":"学习学习学习哦耶","description":"","author":"xuanzaismart","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2024-09-02T09:53:06.000Z","updated":"2024-09-02T09:55:24.218Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2024-09-02T09:25:14.000Z","updated":"2024-09-02T09:55:07.768Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2024-09-02T09:24:06.000Z","updated":"2024-09-02T09:57:56.089Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"anaconda环境配置，以及python常用库下载语句（包含镜像）","slug":"anaconda环境配置，以及python常用库下载语句（包含镜像）","date":"2024-09-02T12:00:00.000Z","updated":"2024-09-03T09:28:46.184Z","comments":true,"path":"2024/09/02/anaconda环境配置，以及python常用库下载语句（包含镜像）/","permalink":"http://example.com/2024/09/02/anaconda%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%EF%BC%8C%E4%BB%A5%E5%8F%8Apython%E5%B8%B8%E7%94%A8%E5%BA%93%E4%B8%8B%E8%BD%BD%E8%AF%AD%E5%8F%A5%EF%BC%88%E5%8C%85%E5%90%AB%E9%95%9C%E5%83%8F%EF%BC%89/","excerpt":"前言Anaconda 是一个非常流行的 Python 和 R 语言的集成开发环境，特别适合数据科学、机器学习和人工智能领域的开发工作。本文将介绍一些在 Anaconda 环境中常用的 Python 库，并详细说明这些库的安装与引入方法。","text":"前言Anaconda 是一个非常流行的 Python 和 R 语言的集成开发环境，特别适合数据科学、机器学习和人工智能领域的开发工作。本文将介绍一些在 Anaconda 环境中常用的 Python 库，并详细说明这些库的安装与引入方法。 1. 常用 Python 库介绍在使用 Anaconda 时，有一些 Python 库非常常用，几乎每个数据科学家、机器学习工程师都会用到。以下是一些常用库的简单介绍： 1.1 NumPyNumPy 是一个强大的数学库，提供了多维数组对象以及用于操作数组的函数。它是许多数据科学和机器学习库（如 pandas 和 scikit-learn）的基础。 示例NumPy 数组相关操作123456789101112131415161718192021222324252627282930313233import numpy as np# 创建一维数组array_1d = np.array([1, 2, 3, 4])print(&quot;一维数组:&quot;, array_1d)# 创建二维数组array_2d = np.array([[1, 2], [3, 4]])print(&quot;二维数组:\\n&quot;, array_2d)# 数组相加array_sum = array_1d + array_1dprint(&quot;数组相加:&quot;, array_sum)# 数组的广播机制array_broadcast = array_1d * 2print(&quot;数组广播:&quot;, array_broadcast)# 获取数组的第二个元素print(&quot;第二个元素:&quot;, array_1d[1])# 获取二维数组的第一列print(&quot;第一列:&quot;, array_2d[:, 0])# 生成全零数组zeros_array = np.zeros((3, 3))print(&quot;全零数组:\\n&quot;, zeros_array)# 生成单位矩阵identity_matrix = np.eye(3)print(&quot;单位矩阵:\\n&quot;, identity_matrix) 1.2 PandasPandas 是一个数据分析库，提供了易于使用的数据结构和数据分析工具。Pandas 主要用于操作和分析结构化数据（如表格数据）。 1234567891011121314151617181920212223242526272829303132import pandas as pd# 创建字典data = &#123;&#x27;Name&#x27;: [&#x27;Tom&#x27;, &#x27;Jerry&#x27;, &#x27;Spike&#x27;], &#x27;Age&#x27;: [20, 21, 19], &#x27;Grade&#x27;: [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;A&#x27;]&#125;# 从字典创建 DataFramedf = pd.DataFrame(data)print(&quot;DataFrame:\\n&quot;, df)# 筛选年龄大于20的行filtered_df = df[df[&#x27;Age&#x27;] &gt; 20]print(&quot;筛选结果:\\n&quot;, filtered_df)# 添加新列df[&#x27;Passed&#x27;] = df[&#x27;Grade&#x27;] == &#x27;A&#x27;print(&quot;添加新列后的 DataFrame:\\n&quot;, df)# 按照 Grade 分组并统计各组的平均年龄grouped_df = df.groupby(&#x27;Grade&#x27;)[&#x27;Age&#x27;].mean()print(&quot;按 Grade 分组后的平均年龄:\\n&quot;, grouped_df)# 创建包含缺失值的 DataFramedata_with_nan = &#123;&#x27;Name&#x27;: [&#x27;Tom&#x27;, &#x27;Jerry&#x27;, None], &#x27;Age&#x27;: [20, None, 19]&#125;df_with_nan = pd.DataFrame(data_with_nan)# 填充缺失值df_filled = df_with_nan.fillna(&#x27;Unknown&#x27;)print(&quot;填充缺失值后的 DataFrame:\\n&quot;, df_filled) 1.3 MatplotlibMatplotlib 是一个用于创建静态、动态和交互式可视化图表的绘图库。它与 NumPy 配合良好，可用于生成各种类型的图表，如折线图、柱状图、散点图等。自用库 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566import matplotlib.pyplot as plt# 数据x = [1, 2, 3, 4, 5]y = [1, 4, 9, 16, 25]# 绘制折线图plt.plot(x, y, marker=&#x27;o&#x27;)plt.title(&#x27;折线图示例&#x27;)plt.xlabel(&#x27;X 轴&#x27;)plt.ylabel(&#x27;Y 轴&#x27;)plt.show()# 数据categories = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]values = [5, 7, 3]# 绘制柱状图plt.bar(categories, values, color=&#x27;green&#x27;)plt.title(&#x27;柱状图示例&#x27;)plt.xlabel(&#x27;类别&#x27;)plt.ylabel(&#x27;值&#x27;)plt.show()# 数据x = [1, 2, 3, 4, 5]y = [2, 3, 5, 7, 11]# 绘制散点图plt.scatter(x, y, color=&#x27;red&#x27;)plt.title(&#x27;散点图示例&#x27;)plt.xlabel(&#x27;X 轴&#x27;)plt.ylabel(&#x27;Y 轴&#x27;)plt.show()# 数据data = [1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 6, 7]# 绘制直方图plt.hist(data, bins=7, color=&#x27;blue&#x27;, edgecolor=&#x27;black&#x27;)plt.title(&#x27;直方图示例&#x27;)plt.xlabel(&#x27;值&#x27;)plt.ylabel(&#x27;频率&#x27;)plt.show()# 数据x = [1, 2, 3, 4, 5]y1 = [1, 4, 9, 16, 25]y2 = [2, 3, 5, 7, 11]# 创建两个子图fig, axs = plt.subplots(2)# 第一个子图axs[0].plot(x, y1, marker=&#x27;o&#x27;)axs[0].set_title(&#x27;子图 1&#x27;)# 第二个子图axs[1].scatter(x, y2, color=&#x27;red&#x27;)axs[1].set_title(&#x27;子图 2&#x27;)# 调整布局plt.tight_layout()plt.show() 1.4 Scikit-learnScikit-learn 是一个机器学习库，提供了简单而高效的数据挖掘和数据分析工具，支持各种分类、回归、聚类算法。它建立在 NumPy、SciPy 和 Matplotlib 之上。 123456789101112131415161718192021222324252627282930313233343536from sklearn.datasets import load_iris# 加载 Iris 数据集iris = load_iris()print(&quot;特征名称:&quot;, iris.feature_names)print(&quot;标签名称:&quot;, iris.target_names)from sklearn.model_selection import train_test_split# 数据集划分为训练集和测试集X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.3, random_state=42)print(&quot;训练集大小:&quot;, X_train.shape)print(&quot;测试集大小:&quot;, X_test.shape)from sklearn.neighbors import KNeighborsClassifier# 创建 KNN 分类器并训练knn = KNeighborsClassifier(n_neighbors=3)knn.fit(X_train, y_train)# 预测predictions = knn.predict(X_test)print(&quot;预测结果:&quot;, predictions)from sklearn.metrics import accuracy_score# 计算模型的准确率accuracy = accuracy_score(y_test, predictions)print(&quot;模型准确率:&quot;, accuracy)from sklearn.preprocessing import StandardScaler# 特征标准化scaler = StandardScaler()X 1.5 TensorFlow&#x2F;PyTorchTensorFlow 和 PyTorch 是两个非常流行的深度学习框架，分别由 Google 和 Facebook 开发。它们都提供了强大的工具和函数，用于构建和训练神经网络模型。 1.6 Jupyter NotebookJupyter Notebook 是一个交互式的开发环境，特别适合数据分析和机器学习任务。它允许用户将代码、文本、图表和公式组合在一个文档中，非常适合演示和分享工作成果。我在实习的时候常用jupyterlab，比pycharm好用在 2. 常用库列表以下是常用库的列表，供大家参考： 库名称 功能描述 官方文档链接 NumPy 数学计算，支持多维数组 NumPy 官方文档 Pandas 数据分析和操作 Pandas 官方文档 Matplotlib 数据可视化 Matplotlib 官方文档 Scikit-learn 机器学习算法 Scikit-learn 官方文档 TensorFlow 深度学习框架 TensorFlow 官方文档 PyTorch 深度学习框架 PyTorch 官方文档 Jupyter Notebook 交互式计算环境 Jupyter 官方文档 3. 引入与安装方法3.1 使用 Conda 安装Anaconda 自带了 Conda 包管理工具，使用 Conda 可以方便地安装和管理环境中的库。 安装库的命令如下： conda install numpy pandas matplotlib scikit-learn tensorflow pytorch jupyter 清华镜像：https://pypi.tuna.tsinghua.edu.cn/simple 科大镜像：https://pypi.mirrors.ustc.edu.cn/simple 豆瓣镜像：http://pypi.douban.com/simple/ 阿里镜像：https://mirrors.aliyun.com/pypi/simple/ 百度镜像：https://mirror.baidu.com/pypi/simple #安装pytorch（自用 pip3 install torch==2.0.1 torchaudio torchvision==0.15.2 --index-url https://download.pytorch.org/whl/cu118","categories":[{"name":"环境","slug":"环境","permalink":"http://example.com/categories/%E7%8E%AF%E5%A2%83/"},{"name":"Python","slug":"环境/Python","permalink":"http://example.com/categories/%E7%8E%AF%E5%A2%83/Python/"}],"tags":[{"name":"Anaconda","slug":"Anaconda","permalink":"http://example.com/tags/Anaconda/"},{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"常用库","slug":"常用库","permalink":"http://example.com/tags/%E5%B8%B8%E7%94%A8%E5%BA%93/"}]},{"title":"Hexo 博客中如何插入多种内容","slug":"leecode150-萱仔算法复习记录1-数组","date":"2024-09-02T06:00:00.000Z","updated":"2024-09-02T17:25:03.313Z","comments":true,"path":"2024/09/02/leecode150-萱仔算法复习记录1-数组/","permalink":"http://example.com/2024/09/02/leecode150-%E8%90%B1%E4%BB%94%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0%E8%AE%B0%E5%BD%951-%E6%95%B0%E7%BB%84/","excerpt":"前言在这篇文章中，我将演示如何在 Hexo 博客中插入各种内容，包括图片、表格、代码块，以及使用不同级别的标题来组织文章结构。","text":"前言在这篇文章中，我将演示如何在 Hexo 博客中插入各种内容，包括图片、表格、代码块，以及使用不同级别的标题来组织文章结构。 插入图片在 Hexo 博客中插入图片非常简单。你可以使用本地图片或网络图片。下面是一个本地图片的示例： 插入表格Markdown 还支持创建简单的表格。下面是一个插入表格的示例，表格可以用来展示数据或进行比较。 功能 描述 支持情况 插入图片 可以插入本地或网络图片 支持 插入表格 可以用 Markdown 创建简单表格 支持 插入代码块 支持多种编程语言的语法高亮 支持 插入代码块Hexo 支持使用 Markdown 插入代码块，并且可以对多种编程语言进行语法高亮。下面是一个插入 Python 代码块的示例： 示例代码块（Python）def hello_world(): print(&quot;Hello, World!&quot;) hello_world()","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"教程","slug":"教程","permalink":"http://example.com/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"Hello World","slug":"hello-world","date":"2024-08-31T17:09:31.473Z","updated":"2024-08-31T17:09:31.473Z","comments":true,"path":"2024/09/01/hello-world/","permalink":"http://example.com/2024/09/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"环境","slug":"环境","permalink":"http://example.com/categories/%E7%8E%AF%E5%A2%83/"},{"name":"Python","slug":"环境/Python","permalink":"http://example.com/categories/%E7%8E%AF%E5%A2%83/Python/"},{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Anaconda","slug":"Anaconda","permalink":"http://example.com/tags/Anaconda/"},{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"常用库","slug":"常用库","permalink":"http://example.com/tags/%E5%B8%B8%E7%94%A8%E5%BA%93/"},{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"教程","slug":"教程","permalink":"http://example.com/tags/%E6%95%99%E7%A8%8B/"}]}